# Create port_slicer
cell pavel-demin:user:port_slicer slice_0 {
  DIN_WIDTH 8 DIN_FROM 2 DIN_TO 2
}

cell pavel-demin:user:port_slicer slice_1 {
  DIN_WIDTH 96 DIN_FROM 31 DIN_TO 0
}

# Create port_slicer
cell pavel-demin:user:port_slicer slice_2 {
  DIN_WIDTH 96 DIN_FROM 47 DIN_TO 32
}

# Create port_slicer
cell pavel-demin:user:port_slicer slice_3 {
  DIN_WIDTH 96 DIN_FROM 63 DIN_TO 48
}

# Create port_slicer
cell pavel-demin:user:port_slicer slice_4 {
  DIN_WIDTH 96 DIN_FROM 79 DIN_TO 64
}

# Create axis_fifo
cell pavel-demin:user:axis_fifo fifo_0 {
  S_AXIS_TDATA_WIDTH 32
  M_AXIS_TDATA_WIDTH 64
  WRITE_DEPTH 4096
  ALWAYS_VALID TRUE
} {
  aclk /pll_0/clk_out1
}

# Create axis_subset_converter
cell xilinx.com:ip:axis_subset_converter subset_0 {
  S_TDATA_NUM_BYTES.VALUE_SRC USER
  M_TDATA_NUM_BYTES.VALUE_SRC USER
  S_TDATA_NUM_BYTES 8
  M_TDATA_NUM_BYTES 8
  TDATA_REMAP {tdata[7:0],tdata[15:8],tdata[23:16],tdata[31:24],tdata[39:32],tdata[47:40],tdata[55:48],tdata[63:56]}
} {
  S_AXIS fifo_0/M_AXIS
  aclk /pll_0/clk_out1
  aresetn /rst_0/peripheral_aresetn
}

# Create axis_dwidth_converter
cell xilinx.com:ip:axis_dwidth_converter conv_0 {
  S_TDATA_NUM_BYTES.VALUE_SRC USER
  S_TDATA_NUM_BYTES 8
  M_TDATA_NUM_BYTES 2
} {
  S_AXIS subset_0/M_AXIS
  aclk /pll_0/clk_out1
  aresetn /rst_0/peripheral_aresetn
}

# Create fir_compiler
cell xilinx.com:ip:fir_compiler fir_0 {
  DATA_WIDTH.VALUE_SRC USER
  DATA_WIDTH 16
  COEFFICIENTVECTOR {-2.6229315643e-08, -1.4575189608e-08, 2.3544351987e-08, 9.9100500421e-09, -1.1896686147e-08, 3.6925799365e-09, -1.1339031756e-08, -3.0451489588e-08, 4.8797644644e-08, 7.5494479545e-08, -1.0301850156e-07, -1.4491247059e-07, 1.7627123159e-07, 2.4574917080e-07, -2.7037727803e-07, -3.8595812235e-07, 3.8650409940e-07, 5.7429368459e-07, -5.2496702682e-07, -8.2015879783e-07, 6.8501970163e-07, 1.1333807576e-06, -8.6466262547e-07, -1.5239303529e-06, 1.0604571813e-06, 2.0015515139e-06, -1.2673910905e-06, -2.5753328642e-06, 1.4787682869e-06, 3.2531265319e-06, -1.6863842217e-06, -4.0413382411e-06, 1.8801065901e-06, 4.9438036521e-06, -2.0484701588e-06, -5.9614536981e-06, 2.1787509664e-06, 7.0915617139e-06, -2.2573635088e-06, -8.3270861293e-06, 2.2703098416e-06, 9.6559414596e-06, -2.2038614817e-06, -1.1060402068e-05, 2.0453068303e-06, 1.2516523184e-05, -1.7838783118e-06, -1.3993715941e-05, 1.4117293940e-06, 1.5454357424e-05, -9.2511049177e-07, -1.6853619994e-05, 3.2552805309e-07, 1.8139075259e-05, 3.7791070391e-07, -1.9252711849e-05, -1.1695325752e-06, 2.0128802730e-05, 2.0233867906e-06, -2.0696344883e-05, -2.9028329818e-06, 2.0879751790e-05, 3.7591816929e-06, -2.0600302535e-05, -4.5307319174e-06, 1.9777634461e-05, 5.1417009138e-06, -1.8331839994e-05, -5.5016554830e-06, 1.6185686811e-05, 5.5051362994e-06, -1.3267270672e-05, -5.0319180744e-06, 9.5126084166e-06, 3.9474917356e-06, -4.8685581149e-06, -2.1044267148e-06, -7.0560412078e-07, -6.5966012741e-07, 7.2286922238e-06, 4.5111671217e-06, -1.4704097404e-05, -9.6261413686e-06, 2.3110748183e-05, 1.6183320165e-05, -3.2401763393e-05, -2.4360210920e-05, 4.2501978216e-05, 3.4327868430e-05, -5.3306505569e-05, -4.6245717821e-05, 6.4679179921e-05, 6.0255201863e-05, -7.6452102062e-05, -7.6473190420e-05, 8.8425624978e-05, 9.4984356194e-05, -1.0036994031e-04, -1.1583366515e-04, 1.1202747732e-04, 1.3901770900e-04, -1.2312067487e-04, -1.6448768937e-04, 1.3333746470e-04, 1.9211542598e-04, -1.4236593706e-04, -2.2171145471e-04, 1.4988306976e-04, 2.5300750426e-04, -1.5556734998e-04, -2.8565072608e-04, 1.5910861641e-04, 3.1919746554e-04, -1.6022010961e-04, -3.5310929443e-04, 1.5865042704e-04, 3.8674918710e-04, -1.5419736846e-04, -4.1937970252e-04, 1.4672207096e-04, 4.5016167730e-04, -1.3616525336e-04, -4.7815540365e-04, 1.2256408058e-04, 5.0232172526e-04, -1.0608063684e-04, -5.2155682273e-04, 8.6966970711e-05, 5.3462850501e-04, -6.5660585131e-05, -5.4025611048e-04, 4.2750622847e-05, 5.3709399492e-04, -1.9005340331e-05, -5.2374747022e-04, -4.6117170930e-06, 4.9878849190e-04, 2.6925484453e-05, -4.6077505311e-04, -4.6536367578e-05, 4.0827061887e-04, 6.1807282367e-05, -3.3986609330e-04, -7.0853258547e-05, 2.5420128513e-04, 7.1530485899e-05, -1.4998793265e-04, -6.1425618020e-05, 2.6029315174e-05, 3.7817629682e-05, 1.1867589896e-04, 2.1895967259e-06, -2.8509833657e-04, -6.1882620762e-05, 4.7396419731e-04, 1.4480734332e-04, -6.8580703714e-04, -2.5480428329e-04, 9.2093956178e-04, 3.9601784493e-04, -1.1794310990e-03, -5.7290803667e-04, 1.4610852045e-03, 7.9026352219e-04, -1.7654218798e-03, -1.0532227161e-03, 2.0916607528e-03, 1.3673021359e-03, -2.4387095473e-03, -1.7384399447e-03, 2.8051566791e-03, 2.1730630789e-03, -3.1892752739e-03, -2.6782603235e-03, 3.5887809772e-03, 3.2614826622e-03, -4.0013886201e-03, -3.9313230781e-03, 4.4242382183e-03, 4.6973181075e-03, -4.8541091024e-03, -5.5703216540e-03, 5.2873846396e-03, 6.5629028217e-03, -5.7200133957e-03, -7.6898833851e-03, 6.1474504857e-03, 8.9690780428e-03, -6.5645689861e-03, -1.0422334702e-02, 6.9655159486e-03, 1.2077011401e-02, -7.3434863227e-03, -1.3968119410e-02, 7.6903698049e-03, 1.6141535901e-02, -7.9961828564e-03, -1.8659240921e-02, 8.2469045399e-03, 2.1604907238e-02, -8.4252635480e-03, -2.5099053420e-02, 8.5046516838e-03, 2.9317734211e-02, -8.4436378969e-03, -3.4529623790e-02, 8.1724630902e-03, 4.1165369927e-02, -7.5631960389e-03, -4.9959018042e-02, 6.3563641423e-03, 6.2266009170e-02, -3.9539657062e-03, -8.0875672770e-02, -1.2859091964e-03, 1.1248358204e-01, 1.5223816893e-02, -1.7733614372e-01, -7.0460678332e-02, 3.6096855974e-01, 6.1539451099e-01, 3.6096855974e-01, -7.0460678332e-02, -1.7733614372e-01, 1.5223816893e-02, 1.1248358204e-01, -1.2859091964e-03, -8.0875672770e-02, -3.9539657062e-03, 6.2266009170e-02, 6.3563641423e-03, -4.9959018042e-02, -7.5631960389e-03, 4.1165369927e-02, 8.1724630902e-03, -3.4529623790e-02, -8.4436378969e-03, 2.9317734211e-02, 8.5046516838e-03, -2.5099053420e-02, -8.4252635480e-03, 2.1604907238e-02, 8.2469045399e-03, -1.8659240921e-02, -7.9961828564e-03, 1.6141535901e-02, 7.6903698049e-03, -1.3968119410e-02, -7.3434863227e-03, 1.2077011401e-02, 6.9655159486e-03, -1.0422334702e-02, -6.5645689861e-03, 8.9690780428e-03, 6.1474504857e-03, -7.6898833851e-03, -5.7200133957e-03, 6.5629028217e-03, 5.2873846396e-03, -5.5703216540e-03, -4.8541091024e-03, 4.6973181075e-03, 4.4242382183e-03, -3.9313230781e-03, -4.0013886201e-03, 3.2614826622e-03, 3.5887809772e-03, -2.6782603235e-03, -3.1892752739e-03, 2.1730630789e-03, 2.8051566791e-03, -1.7384399447e-03, -2.4387095473e-03, 1.3673021359e-03, 2.0916607528e-03, -1.0532227161e-03, -1.7654218798e-03, 7.9026352219e-04, 1.4610852045e-03, -5.7290803667e-04, -1.1794310990e-03, 3.9601784493e-04, 9.2093956178e-04, -2.5480428329e-04, -6.8580703714e-04, 1.4480734332e-04, 4.7396419731e-04, -6.1882620762e-05, -2.8509833657e-04, 2.1895967259e-06, 1.1867589896e-04, 3.7817629682e-05, 2.6029315174e-05, -6.1425618020e-05, -1.4998793265e-04, 7.1530485899e-05, 2.5420128513e-04, -7.0853258547e-05, -3.3986609330e-04, 6.1807282367e-05, 4.0827061887e-04, -4.6536367578e-05, -4.6077505311e-04, 2.6925484453e-05, 4.9878849190e-04, -4.6117170930e-06, -5.2374747022e-04, -1.9005340331e-05, 5.3709399492e-04, 4.2750622847e-05, -5.4025611048e-04, -6.5660585131e-05, 5.3462850501e-04, 8.6966970711e-05, -5.2155682273e-04, -1.0608063684e-04, 5.0232172526e-04, 1.2256408058e-04, -4.7815540365e-04, -1.3616525336e-04, 4.5016167730e-04, 1.4672207096e-04, -4.1937970252e-04, -1.5419736846e-04, 3.8674918710e-04, 1.5865042704e-04, -3.5310929443e-04, -1.6022010961e-04, 3.1919746554e-04, 1.5910861641e-04, -2.8565072608e-04, -1.5556734998e-04, 2.5300750426e-04, 1.4988306976e-04, -2.2171145471e-04, -1.4236593706e-04, 1.9211542598e-04, 1.3333746470e-04, -1.6448768937e-04, -1.2312067487e-04, 1.3901770900e-04, 1.1202747732e-04, -1.1583366515e-04, -1.0036994031e-04, 9.4984356194e-05, 8.8425624978e-05, -7.6473190420e-05, -7.6452102062e-05, 6.0255201863e-05, 6.4679179921e-05, -4.6245717821e-05, -5.3306505569e-05, 3.4327868430e-05, 4.2501978216e-05, -2.4360210920e-05, -3.2401763393e-05, 1.6183320165e-05, 2.3110748183e-05, -9.6261413686e-06, -1.4704097404e-05, 4.5111671217e-06, 7.2286922238e-06, -6.5966012741e-07, -7.0560412078e-07, -2.1044267148e-06, -4.8685581149e-06, 3.9474917356e-06, 9.5126084166e-06, -5.0319180744e-06, -1.3267270672e-05, 5.5051362994e-06, 1.6185686811e-05, -5.5016554830e-06, -1.8331839994e-05, 5.1417009138e-06, 1.9777634461e-05, -4.5307319174e-06, -2.0600302535e-05, 3.7591816929e-06, 2.0879751790e-05, -2.9028329818e-06, -2.0696344883e-05, 2.0233867906e-06, 2.0128802730e-05, -1.1695325752e-06, -1.9252711849e-05, 3.7791070391e-07, 1.8139075259e-05, 3.2552805309e-07, -1.6853619994e-05, -9.2511049177e-07, 1.5454357424e-05, 1.4117293940e-06, -1.3993715941e-05, -1.7838783118e-06, 1.2516523184e-05, 2.0453068303e-06, -1.1060402068e-05, -2.2038614817e-06, 9.6559414596e-06, 2.2703098416e-06, -8.3270861293e-06, -2.2573635088e-06, 7.0915617139e-06, 2.1787509664e-06, -5.9614536981e-06, -2.0484701588e-06, 4.9438036521e-06, 1.8801065901e-06, -4.0413382411e-06, -1.6863842217e-06, 3.2531265319e-06, 1.4787682869e-06, -2.5753328642e-06, -1.2673910905e-06, 2.0015515139e-06, 1.0604571813e-06, -1.5239303529e-06, -8.6466262547e-07, 1.1333807576e-06, 6.8501970163e-07, -8.2015879783e-07, -5.2496702682e-07, 5.7429368459e-07, 3.8650409940e-07, -3.8595812235e-07, -2.7037727803e-07, 2.4574917080e-07, 1.7627123159e-07, -1.4491247059e-07, -1.0301850156e-07, 7.5494479545e-08, 4.8797644644e-08, -3.0451489588e-08, -1.1339031756e-08, 3.6925799365e-09, -1.1896686147e-08, 9.9100500421e-09, 2.3544351987e-08, -1.4575189608e-08, -2.6229315643e-08}
  COEFFICIENT_WIDTH 24
  QUANTIZATION Quantize_Only
  BESTPRECISION true
  FILTER_TYPE Interpolation
  INTERPOLATION_RATE 2
  NUMBER_CHANNELS 4
  NUMBER_PATHS 1
  SAMPLE_FREQUENCY 0.048
  CLOCK_FREQUENCY 122.88
  OUTPUT_ROUNDING_MODE Convergent_Rounding_to_Even
  OUTPUT_WIDTH 25
  M_DATA_HAS_TREADY true
  HAS_ARESETN true
} {
  S_AXIS_DATA conv_0/M_AXIS
  aclk /pll_0/clk_out1
  aresetn /rst_0/peripheral_aresetn
}

# Create axis_subset_converter
cell xilinx.com:ip:axis_subset_converter subset_1 {
  S_TDATA_NUM_BYTES.VALUE_SRC USER
  M_TDATA_NUM_BYTES.VALUE_SRC USER
  S_TDATA_NUM_BYTES 4
  M_TDATA_NUM_BYTES 3
  TDATA_REMAP {tdata[23:0]}
} {
  S_AXIS fir_0/M_AXIS_DATA
  aclk /pll_0/clk_out1
  aresetn /rst_0/peripheral_aresetn
}

# Create axis_dwidth_converter
cell xilinx.com:ip:axis_dwidth_converter conv_1 {
  S_TDATA_NUM_BYTES.VALUE_SRC USER
  S_TDATA_NUM_BYTES 3
  M_TDATA_NUM_BYTES 12
} {
  S_AXIS subset_1/M_AXIS
  aclk /pll_0/clk_out1
  aresetn /rst_0/peripheral_aresetn
}

# Create axis_broadcaster
cell xilinx.com:ip:axis_broadcaster bcast_0 {
  S_TDATA_NUM_BYTES.VALUE_SRC USER
  M_TDATA_NUM_BYTES.VALUE_SRC USER
  S_TDATA_NUM_BYTES 12
  M_TDATA_NUM_BYTES 6
  M00_TDATA_REMAP {tdata[47:0]}
  M01_TDATA_REMAP {tdata[95:48]}
} {
  S_AXIS conv_1/M_AXIS
  aclk /pll_0/clk_out1
  aresetn /rst_0/peripheral_aresetn
}

# Create blk_mem_gen
cell xilinx.com:ip:blk_mem_gen bram_0 {
  MEMORY_TYPE True_Dual_Port_RAM
  USE_BRAM_BLOCK Stand_Alone
  USE_BYTE_WRITE_ENABLE true
  BYTE_SIZE 8
  WRITE_WIDTH_A 32
  WRITE_DEPTH_A 1024
  WRITE_WIDTH_B 32
  REGISTER_PORTA_OUTPUT_OF_MEMORY_PRIMITIVES false
  REGISTER_PORTB_OUTPUT_OF_MEMORY_PRIMITIVES false
}

# Create axis_keyer
cell pavel-demin:user:axis_keyer keyer_0 {
  AXIS_TDATA_WIDTH 32
  BRAM_DATA_WIDTH 32
  BRAM_ADDR_WIDTH 10
} {
  B_BRAM bram_0/BRAM_PORTB
  cfg_data slice_2/dout
  aclk /pll_0/clk_out1
  aresetn /rst_0/peripheral_aresetn
}

# Create axis_subset_converter
cell xilinx.com:ip:axis_subset_converter subset_2 {
  S_TDATA_NUM_BYTES.VALUE_SRC USER
  M_TDATA_NUM_BYTES.VALUE_SRC USER
  S_TDATA_NUM_BYTES 4
  M_TDATA_NUM_BYTES 6
  TDATA_REMAP {24'b000000000000000000000000,tdata[23:0]}
} {
  S_AXIS keyer_0/M_AXIS
  aclk /pll_0/clk_out1
  aresetn /rst_0/peripheral_aresetn
}

# Create axis_selector
cell pavel-demin:user:axis_selector sel_0 {
  AXIS_TDATA_WIDTH 48
} {
  S00_AXIS bcast_0/M00_AXIS
  S01_AXIS subset_2/M_AXIS
  aclk /pll_0/clk_out1
  aresetn /rst_0/peripheral_aresetn
}

# Create axis_broadcaster
cell xilinx.com:ip:axis_broadcaster bcast_1 {
  S_TDATA_NUM_BYTES.VALUE_SRC USER
  M_TDATA_NUM_BYTES.VALUE_SRC USER
  S_TDATA_NUM_BYTES 6
  M_TDATA_NUM_BYTES 3
  M00_TDATA_REMAP {tdata[23:0]}
  M01_TDATA_REMAP {tdata[47:24]}
} {
  S_AXIS sel_0/M_AXIS
  aclk /pll_0/clk_out1
  aresetn /rst_0/peripheral_aresetn
}

# Create axis_broadcaster
cell xilinx.com:ip:axis_broadcaster bcast_2 {
  S_TDATA_NUM_BYTES.VALUE_SRC USER
  M_TDATA_NUM_BYTES.VALUE_SRC USER
  S_TDATA_NUM_BYTES 6
  M_TDATA_NUM_BYTES 3
  M00_TDATA_REMAP {tdata[23:0]}
  M01_TDATA_REMAP {tdata[47:24]}
} {
  S_AXIS bcast_0/M01_AXIS
  aclk /pll_0/clk_out1
  aresetn /rst_0/peripheral_aresetn
}

for {set i 0} {$i <= 3} {incr i} {

  # Create cic_compiler
  cell xilinx.com:ip:cic_compiler cic_$i {
    INPUT_DATA_WIDTH.VALUE_SRC USER
    FILTER_TYPE Interpolation
    NUMBER_OF_STAGES 6
    FIXED_OR_INITIAL_RATE 1280
    INPUT_SAMPLE_FREQUENCY 0.096
    CLOCK_FREQUENCY 122.88
    INPUT_DATA_WIDTH 24
    QUANTIZATION Truncation
    OUTPUT_DATA_WIDTH 24
    USE_XTREME_DSP_SLICE false
    HAS_ARESETN true
  } {
    S_AXIS_DATA bcast_[expr $i / 2 + 1]/M0[expr $i % 2]_AXIS
    aclk /pll_0/clk_out1
    aresetn /rst_0/peripheral_aresetn
  }

}

# Create axis_combiner
cell  xilinx.com:ip:axis_combiner comb_0 {
  TDATA_NUM_BYTES.VALUE_SRC USER
  TDATA_NUM_BYTES 3
} {
  S00_AXIS cic_0/M_AXIS_DATA
  S01_AXIS cic_1/M_AXIS_DATA
  aclk /pll_0/clk_out1
  aresetn /rst_0/peripheral_aresetn
}

# Create axis_constant
cell pavel-demin:user:axis_constant phase_0 {
  AXIS_TDATA_WIDTH 32
} {
  cfg_data slice_1/dout
  aclk /pll_0/clk_out1
}

# Create dds_compiler
cell xilinx.com:ip:dds_compiler dds_0 {
  DDS_CLOCK_RATE 122.88
  SPURIOUS_FREE_DYNAMIC_RANGE 138
  FREQUENCY_RESOLUTION 0.2
  PHASE_INCREMENT Streaming
  HAS_ARESETN true
  HAS_PHASE_OUT false
  PHASE_WIDTH 30
  OUTPUT_WIDTH 24
  DSP48_USE Minimal
} {
  S_AXIS_PHASE phase_0/M_AXIS
  aclk /pll_0/clk_out1
  aresetn slice_0/dout
}

# Create axis_lfsr
cell pavel-demin:user:axis_lfsr lfsr_0 {} {
  aclk /pll_0/clk_out1
  aresetn /rst_0/peripheral_aresetn
}

# Create cmpy
cell xilinx.com:ip:cmpy mult_0 {
  APORTWIDTH.VALUE_SRC USER
  BPORTWIDTH.VALUE_SRC USER
  APORTWIDTH 24
  BPORTWIDTH 24
  ROUNDMODE Random_Rounding
  OUTPUTWIDTH 26
} {
  S_AXIS_A comb_0/M_AXIS
  s_axis_b_tdata dds_0/m_axis_data_tdata
  s_axis_b_tvalid dds_0/m_axis_data_tvalid
  S_AXIS_CTRL lfsr_0/M_AXIS
  aclk /pll_0/clk_out1
}

# Create dsp48
cell pavel-demin:user:dsp48 mult_1 {
  A_WIDTH 24
  B_WIDTH 16
  P_WIDTH 16
} {
  A mult_0/m_axis_dout_tdata
  B slice_3/dout
  CLK /pll_0/clk_out1
}

# Create dsp48
cell pavel-demin:user:dsp48 mult_2 {
  A_WIDTH 24
  B_WIDTH 16
  P_WIDTH 18
} {
  A mult_0/m_axis_dout_tdata
  B slice_4/dout
  CLK /pll_0/clk_out1
}

# Create axis_combiner
cell  xilinx.com:ip:axis_combiner comb_1 {
  TDATA_NUM_BYTES.VALUE_SRC USER
  TDATA_NUM_BYTES 3
} {
  S00_AXIS cic_2/M_AXIS_DATA
  S01_AXIS cic_3/M_AXIS_DATA
  aclk /pll_0/clk_out1
  aresetn /rst_0/peripheral_aresetn
}

# Create cordic
cell xilinx.com:ip:cordic cordic_0 {
  INPUT_WIDTH.VALUE_SRC USER
  FUNCTIONAL_SELECTION Translate
  PIPELINING_MODE Optimal
  INPUT_WIDTH 24
  OUTPUT_WIDTH 15
  ROUND_MODE Round_Pos_Neg_Inf
  COMPENSATION_SCALING BRAM
} {
  S_AXIS_CARTESIAN comb_1/M_AXIS
  aclk /pll_0/clk_out1
}

# Create xlconcat
cell xilinx.com:ip:xlconcat concat_0 {
  NUM_PORTS 2
  IN0_WIDTH 16
  IN1_WIDTH 16
} {
  In0 mult_1/P
  In1 cordic_0/m_axis_dout_tdata
}

for {set i 0} {$i <= 1} {incr i} {

  # Create port_slicer
  cell pavel-demin:user:port_slicer slice_[expr $i + 5] {
    DIN_WIDTH 96 DIN_FROM [expr $i + 80] DIN_TO [expr $i + 80]
  }

  # Create port_selector
  cell pavel-demin:user:port_selector selector_$i {
    DOUT_WIDTH 16
  } {
    cfg slice_[expr $i + 5]/dout
    din concat_0/dout
  }

}

# Create xlconcat
cell xilinx.com:ip:xlconcat concat_1 {
  NUM_PORTS 2
  IN0_WIDTH 16
  IN1_WIDTH 16
} {
  In0 selector_0/dout
  In1 selector_1/dout
}
