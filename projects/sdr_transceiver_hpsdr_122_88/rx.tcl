# Create port_slicer
cell pavel-demin:user:port_slicer slice_0 {
  DIN_WIDTH 8 DIN_FROM 0 DIN_TO 0
}

# Create port_slicer
cell pavel-demin:user:port_slicer slice_3 {
  DIN_WIDTH 128 DIN_FROM 15 DIN_TO 0
}

for {set i 0} {$i <= 3} {incr i} {

  # Create port_slicer
  cell pavel-demin:user:port_slicer slice_[expr $i + 4] {
    DIN_WIDTH 128 DIN_FROM [expr $i + 16] DIN_TO [expr $i + 16]
  }

  # Create port_selector
  cell pavel-demin:user:port_selector selector_$i {
    DOUT_WIDTH 16
  } {
    cfg slice_[expr $i + 4]/dout
    din /adc_0/m_axis_tdata
  }

}

for {set i 0} {$i <= 1} {incr i} {

  # Create port_slicer
  cell pavel-demin:user:port_slicer slice_[expr $i + 1] {
    DIN_WIDTH 8 DIN_FROM $i DIN_TO $i
  }

  # Create port_slicer
  cell pavel-demin:user:port_slicer slice_[expr $i + 8] {
    DIN_WIDTH 128 DIN_FROM [expr 32 * $i + 63] DIN_TO [expr 32 * $i + 32]
  }

  # Create axis_constant
  cell pavel-demin:user:axis_constant phase_$i {
    AXIS_TDATA_WIDTH 32
  } {
    cfg_data slice_[expr $i + 8]/dout
    aclk /pll_0/clk_out1
  }

  # Create dds_compiler
  cell xilinx.com:ip:dds_compiler dds_$i {
    DDS_CLOCK_RATE 122.88
    SPURIOUS_FREE_DYNAMIC_RANGE 138
    FREQUENCY_RESOLUTION 0.2
    PHASE_INCREMENT Streaming
    HAS_ARESETN true
    HAS_PHASE_OUT false
    PHASE_WIDTH 30
    OUTPUT_WIDTH 24
    DSP48_USE Minimal
    NEGATIVE_SINE true
  } {
    S_AXIS_PHASE phase_$i/M_AXIS
    aclk /pll_0/clk_out1
    aresetn slice_[expr $i + 1]/dout
  }

}

# Create port_slicer
cell pavel-demin:user:port_slicer slice_10 {
  DIN_WIDTH 128 DIN_FROM 127 DIN_TO 96
}

# Create axis_constant
cell pavel-demin:user:axis_constant phase_2 {
  AXIS_TDATA_WIDTH 32
} {
  cfg_data slice_10/dout
  aclk /pll_0/clk_out1
}

# Create dds_compiler
cell xilinx.com:ip:dds_compiler dds_2 {
  DDS_CLOCK_RATE 122.88
  SPURIOUS_FREE_DYNAMIC_RANGE 138
  FREQUENCY_RESOLUTION 0.2
  PHASE_INCREMENT Streaming
  HAS_PHASE_OUT false
  PHASE_WIDTH 30
  OUTPUT_WIDTH 24
  DSP48_USE Minimal
  NEGATIVE_SINE true
} {
  S_AXIS_PHASE phase_2/M_AXIS
  aclk /pll_0/clk_out1
}

for {set i 0} {$i <= 5} {incr i} {

  # Create port_slicer
  cell pavel-demin:user:port_slicer dds_slice_$i {
    DIN_WIDTH 48 DIN_FROM [expr 24 * ($i % 2) + 23] DIN_TO [expr 24 * ($i % 2)]
  } {
    din dds_[expr $i / 2]/m_axis_data_tdata
  }

}

for {set i 0} {$i <= 3} {incr i} {

  # Create port_slicer
  cell pavel-demin:user:port_slicer dds_slice_[expr $i + 6] {
    DIN_WIDTH 48 DIN_FROM [expr 47 - 24 * ($i % 2)] DIN_TO [expr 24 - 24 * ($i % 2)]
  }

}

for {set i 0} {$i <= 7} {incr i} {

  # Create port_slicer
  cell pavel-demin:user:port_slicer adc_slice_$i {
    DIN_WIDTH 16 DIN_FROM 15 DIN_TO 0
  } {
    din selector_[expr $i / 2]/dout
  }

}

for {set i 0} {$i <= 1} {incr i} {

  # Create port_slicer
  cell pavel-demin:user:port_slicer adc_slice_[expr $i + 8] {
    DIN_WIDTH 16 DIN_FROM 15 DIN_TO 0
  }

}

# Create xlconstant
cell xilinx.com:ip:xlconstant const_0

for {set i 0} {$i <= 9} {incr i} {

  # Create dsp48
  cell pavel-demin:user:dsp48 mult_$i {
    A_WIDTH 24
    B_WIDTH 16
    P_WIDTH 24
  } {
    A dds_slice_$i/dout
    B adc_slice_$i/dout
    CLK /pll_0/clk_out1
  }

  # Create axis_variable
  cell pavel-demin:user:axis_variable rate_$i {
    AXIS_TDATA_WIDTH 16
  } {
    cfg_data slice_3/dout
    aclk /pll_0/clk_out1
    aresetn /rst_0/peripheral_aresetn
  }

  # Create cic_compiler
  cell xilinx.com:ip:cic_compiler cic_$i {
    INPUT_DATA_WIDTH.VALUE_SRC USER
    FILTER_TYPE Decimation
    NUMBER_OF_STAGES 6
    SAMPLE_RATE_CHANGES Programmable
    MINIMUM_RATE 160
    MAXIMUM_RATE 1280
    FIXED_OR_INITIAL_RATE 1280
    INPUT_SAMPLE_FREQUENCY 122.88
    CLOCK_FREQUENCY 122.88
    INPUT_DATA_WIDTH 24
    QUANTIZATION Truncation
    OUTPUT_DATA_WIDTH 32
    USE_XTREME_DSP_SLICE false
    HAS_ARESETN true
  } {
    s_axis_data_tdata mult_$i/P
    s_axis_data_tvalid const_0/dout
    S_AXIS_CONFIG rate_$i/M_AXIS
    aclk /pll_0/clk_out1
    aresetn /rst_0/peripheral_aresetn
  }

}

# Create axis_combiner
cell  xilinx.com:ip:axis_combiner comb_0 {
  TDATA_NUM_BYTES.VALUE_SRC USER
  TDATA_NUM_BYTES 4
  NUM_SI 10
} {
  S00_AXIS cic_0/M_AXIS_DATA
  S01_AXIS cic_1/M_AXIS_DATA
  S02_AXIS cic_2/M_AXIS_DATA
  S03_AXIS cic_3/M_AXIS_DATA
  S04_AXIS cic_4/M_AXIS_DATA
  S05_AXIS cic_5/M_AXIS_DATA
  S06_AXIS cic_6/M_AXIS_DATA
  S07_AXIS cic_7/M_AXIS_DATA
  S08_AXIS cic_8/M_AXIS_DATA
  S09_AXIS cic_9/M_AXIS_DATA
  aclk /pll_0/clk_out1
  aresetn /rst_0/peripheral_aresetn
}

# Create axis_dwidth_converter
cell xilinx.com:ip:axis_dwidth_converter conv_0 {
  S_TDATA_NUM_BYTES.VALUE_SRC USER
  S_TDATA_NUM_BYTES 40
  M_TDATA_NUM_BYTES 4
} {
  S_AXIS comb_0/M_AXIS
  aclk /pll_0/clk_out1
  aresetn /rst_0/peripheral_aresetn
}

# Create fir_compiler
cell xilinx.com:ip:fir_compiler fir_0 {
  DATA_WIDTH.VALUE_SRC USER
  DATA_WIDTH 32
  COEFFICIENTVECTOR {-2.6228801431e-08, -1.4574685714e-08, 2.3543953681e-08, 9.9095823448e-09, -1.1896627038e-08, 3.6928168903e-09, -1.1338465416e-08, -3.0451202565e-08, 4.8796104311e-08, 7.5493255238e-08, -1.0301557916e-07, -1.4490975265e-07, 1.7626646656e-07, 2.4574423705e-07, -2.7037016890e-07, -3.8595006288e-07, 3.8649412055e-07, 5.7428138272e-07, -5.2495364996e-07, -8.2014091459e-07, 6.8500242256e-07, 1.1333557216e-06, -8.6464099545e-07, -1.5238963569e-06, 1.0604308434e-06, 2.0015065204e-06, -1.2673598189e-06, -2.5752746218e-06, 1.4787320292e-06, 3.2530526059e-06, -1.6863431335e-06, -4.0412460435e-06, 1.8800610887e-06, 4.9436905074e-06, -2.0484209554e-06, -5.9613169134e-06, 2.1786990971e-06, 7.0913986658e-06, -2.2573103572e-06, -8.3268943672e-06, 2.2702571510e-06, 9.6557188270e-06, -2.2038113503e-06, -1.1060146838e-05, 2.0452616881e-06, 1.2516234207e-05, -1.7838408751e-06, -1.3993392805e-05, 1.4117025970e-06, 1.5454000622e-05, -9.2509739073e-07, -1.6853231100e-05, 3.2553169724e-07, 1.8138657111e-05, 3.7788747011e-07, -1.9252268659e-05, -1.1694872403e-06, 2.0128340287e-05, 2.0233174355e-06, -2.0695870675e-05, -2.9027385424e-06, 2.0879275110e-05, 3.7590622510e-06, -2.0599834549e-05, -4.5305890125e-06, 1.9777188243e-05, 5.1415378851e-06, -1.8331430508e-05, -5.5014778241e-06, 1.6185330839e-05, 5.5049520235e-06, -1.3266986678e-05, -5.0317380688e-06, 9.5124163489e-06, 3.9473301045e-06, -4.8684791448e-06, -2.1043011032e-06, -7.0554789327e-07, -6.5972811486e-07, 7.2284784046e-06, 4.5111519300e-06, -1.4703703600e-05, -9.6260132118e-06, 2.3110152612e-05, 1.6183044942e-05, -3.2400945530e-05, -2.4359750246e-05, 4.2500919494e-05, 3.4327179793e-05, -5.3305190106e-05, -4.6244754856e-05, 6.4677595292e-05, 6.0253914784e-05, -7.6450240077e-05, -7.6471526610e-05, 8.8423482467e-05, 9.4982260983e-05, -1.0036751987e-04, -1.1583108279e-04, 1.1202478792e-04, 1.3901458377e-04, -1.2311773238e-04, -1.6448396655e-04, 1.3333429297e-04, 1.9211105404e-04, -1.4236256765e-04, -2.2170638670e-04, 1.4987954228e-04, 2.5300169959e-04, -1.5556371208e-04, -2.8564415263e-04, 1.5910492352e-04, 3.1919010180e-04, -1.6021642439e-04, -3.5310113182e-04, 1.5864681851e-04, 3.8674023229e-04, -1.5419391085e-04, -4.1936997986e-04, 1.4671884216e-04, 4.5015123127e-04, -1.3616233301e-04, -4.7814430128e-04, 1.2256154763e-04, 5.0231005844e-04, -1.0607856643e-04, -5.2154470927e-04, 8.6965432771e-05, 5.3461609261e-04, -6.5659639169e-05, -5.4024357742e-04, 4.2750314333e-05, 5.3708155153e-04, -1.9005696477e-05, -5.2373535993e-04, -4.6106920288e-06, 4.9877699206e-04, 2.6923814290e-05, -4.6076447520e-04, -4.6534109636e-05, 4.0826130826e-04, 6.1804533190e-05, -3.3985842843e-04, -7.0850159874e-05, 2.5419567626e-04, 7.1527230918e-05, -1.4998482005e-04, -6.1422458146e-05, 2.6029166420e-05, 3.7814882195e-05, 1.1867259505e-04, 2.1915465216e-06, -2.8509106855e-04, -6.1883308187e-05, 4.7395243845e-04, 1.4480621829e-04, -6.8579025070e-04, -2.5480070357e-04, 9.2091720671e-04, 3.9601106895e-04, -1.1794026363e-03, -5.7289721602e-04, 1.4610501044e-03, 7.9024769385e-04, -1.7653796291e-03, -1.0532007942e-03, 2.0916108632e-03, 1.3672729031e-03, -2.4386515641e-03, -1.7384020418e-03, 2.8050901899e-03, 2.1730149932e-03, -3.1891999185e-03, -2.6782003724e-03, 3.5886964671e-03, 3.2614089911e-03, -4.0012947340e-03, -3.9312336281e-03, 4.4241348225e-03, 4.6972105940e-03, -4.8539961656e-03, -5.5701935376e-03, 5.2872622479e-03, 6.5627512690e-03, -5.7198817717e-03, -7.6897052167e-03, 6.1473100114e-03, 8.9688696654e-03, -6.5644202328e-03, -1.0422092016e-02, 6.9653597160e-03, 1.2076729678e-02, -7.3433236932e-03, -1.3967793116e-02, 7.6902022200e-03, 1.6141158451e-02, -7.9960122359e-03, -1.8658804318e-02, 8.2467335040e-03, 2.1604401624e-02, -8.4250956386e-03, -2.5098466247e-02, 8.5044919011e-03, 2.9317049062e-02, -8.4434935831e-03, -3.4528818454e-02, 8.1723455874e-03, 4.1164413160e-02, -7.5631240514e-03, -4.9957863819e-02, 6.3563712086e-03, 6.2264585957e-02, -3.9541189195e-03, -8.0873862734e-02, -1.2854541106e-03, 1.1248118436e-01, 1.5222613880e-02, -1.7733290093e-01, -7.0457033978e-02, 3.6096669441e-01, 6.1538896706e-01, 3.6096669441e-01, -7.0457033978e-02, -1.7733290093e-01, 1.5222613880e-02, 1.1248118436e-01, -1.2854541106e-03, -8.0873862734e-02, -3.9541189195e-03, 6.2264585957e-02, 6.3563712086e-03, -4.9957863819e-02, -7.5631240514e-03, 4.1164413160e-02, 8.1723455874e-03, -3.4528818454e-02, -8.4434935831e-03, 2.9317049062e-02, 8.5044919011e-03, -2.5098466247e-02, -8.4250956386e-03, 2.1604401624e-02, 8.2467335040e-03, -1.8658804318e-02, -7.9960122359e-03, 1.6141158451e-02, 7.6902022200e-03, -1.3967793116e-02, -7.3433236932e-03, 1.2076729678e-02, 6.9653597160e-03, -1.0422092016e-02, -6.5644202328e-03, 8.9688696654e-03, 6.1473100114e-03, -7.6897052167e-03, -5.7198817717e-03, 6.5627512690e-03, 5.2872622479e-03, -5.5701935376e-03, -4.8539961656e-03, 4.6972105940e-03, 4.4241348225e-03, -3.9312336281e-03, -4.0012947340e-03, 3.2614089911e-03, 3.5886964671e-03, -2.6782003724e-03, -3.1891999185e-03, 2.1730149932e-03, 2.8050901899e-03, -1.7384020418e-03, -2.4386515641e-03, 1.3672729031e-03, 2.0916108632e-03, -1.0532007942e-03, -1.7653796291e-03, 7.9024769385e-04, 1.4610501044e-03, -5.7289721602e-04, -1.1794026363e-03, 3.9601106895e-04, 9.2091720671e-04, -2.5480070357e-04, -6.8579025070e-04, 1.4480621829e-04, 4.7395243845e-04, -6.1883308187e-05, -2.8509106855e-04, 2.1915465216e-06, 1.1867259505e-04, 3.7814882195e-05, 2.6029166420e-05, -6.1422458146e-05, -1.4998482005e-04, 7.1527230918e-05, 2.5419567626e-04, -7.0850159874e-05, -3.3985842843e-04, 6.1804533190e-05, 4.0826130826e-04, -4.6534109636e-05, -4.6076447520e-04, 2.6923814290e-05, 4.9877699206e-04, -4.6106920288e-06, -5.2373535993e-04, -1.9005696477e-05, 5.3708155153e-04, 4.2750314333e-05, -5.4024357742e-04, -6.5659639169e-05, 5.3461609261e-04, 8.6965432771e-05, -5.2154470927e-04, -1.0607856643e-04, 5.0231005844e-04, 1.2256154763e-04, -4.7814430128e-04, -1.3616233301e-04, 4.5015123127e-04, 1.4671884216e-04, -4.1936997986e-04, -1.5419391085e-04, 3.8674023229e-04, 1.5864681851e-04, -3.5310113182e-04, -1.6021642439e-04, 3.1919010180e-04, 1.5910492352e-04, -2.8564415263e-04, -1.5556371208e-04, 2.5300169959e-04, 1.4987954228e-04, -2.2170638670e-04, -1.4236256765e-04, 1.9211105404e-04, 1.3333429297e-04, -1.6448396655e-04, -1.2311773238e-04, 1.3901458377e-04, 1.1202478792e-04, -1.1583108279e-04, -1.0036751987e-04, 9.4982260983e-05, 8.8423482467e-05, -7.6471526610e-05, -7.6450240077e-05, 6.0253914784e-05, 6.4677595292e-05, -4.6244754856e-05, -5.3305190106e-05, 3.4327179793e-05, 4.2500919494e-05, -2.4359750246e-05, -3.2400945530e-05, 1.6183044942e-05, 2.3110152612e-05, -9.6260132118e-06, -1.4703703600e-05, 4.5111519300e-06, 7.2284784046e-06, -6.5972811486e-07, -7.0554789327e-07, -2.1043011032e-06, -4.8684791448e-06, 3.9473301045e-06, 9.5124163489e-06, -5.0317380688e-06, -1.3266986678e-05, 5.5049520235e-06, 1.6185330839e-05, -5.5014778241e-06, -1.8331430508e-05, 5.1415378851e-06, 1.9777188243e-05, -4.5305890125e-06, -2.0599834549e-05, 3.7590622510e-06, 2.0879275110e-05, -2.9027385424e-06, -2.0695870675e-05, 2.0233174355e-06, 2.0128340287e-05, -1.1694872403e-06, -1.9252268659e-05, 3.7788747011e-07, 1.8138657111e-05, 3.2553169724e-07, -1.6853231100e-05, -9.2509739073e-07, 1.5454000622e-05, 1.4117025970e-06, -1.3993392805e-05, -1.7838408751e-06, 1.2516234207e-05, 2.0452616881e-06, -1.1060146838e-05, -2.2038113503e-06, 9.6557188270e-06, 2.2702571510e-06, -8.3268943672e-06, -2.2573103572e-06, 7.0913986658e-06, 2.1786990971e-06, -5.9613169134e-06, -2.0484209554e-06, 4.9436905074e-06, 1.8800610887e-06, -4.0412460435e-06, -1.6863431335e-06, 3.2530526059e-06, 1.4787320292e-06, -2.5752746218e-06, -1.2673598189e-06, 2.0015065204e-06, 1.0604308434e-06, -1.5238963569e-06, -8.6464099545e-07, 1.1333557216e-06, 6.8500242256e-07, -8.2014091459e-07, -5.2495364996e-07, 5.7428138272e-07, 3.8649412055e-07, -3.8595006288e-07, -2.7037016890e-07, 2.4574423705e-07, 1.7626646656e-07, -1.4490975265e-07, -1.0301557916e-07, 7.5493255238e-08, 4.8796104311e-08, -3.0451202565e-08, -1.1338465416e-08, 3.6928168903e-09, -1.1896627038e-08, 9.9095823448e-09, 2.3543953681e-08, -1.4574685714e-08, -2.6228801431e-08}
  COEFFICIENT_WIDTH 24
  QUANTIZATION Quantize_Only
  BESTPRECISION true
  FILTER_TYPE Decimation
  DECIMATION_RATE 2
  NUMBER_CHANNELS 10
  NUMBER_PATHS 1
  SAMPLE_FREQUENCY 0.768
  CLOCK_FREQUENCY 122.88
  OUTPUT_ROUNDING_MODE Convergent_Rounding_to_Even
  OUTPUT_WIDTH 26
  HAS_ARESETN true
} {
  S_AXIS_DATA conv_0/M_AXIS
  aclk /pll_0/clk_out1
  aresetn /rst_0/peripheral_aresetn
}

# Create axis_dwidth_converter
cell xilinx.com:ip:axis_dwidth_converter conv_1 {
  S_TDATA_NUM_BYTES.VALUE_SRC USER
  S_TDATA_NUM_BYTES 4
  M_TDATA_NUM_BYTES 40
} {
  S_AXIS fir_0/M_AXIS_DATA
  aclk /pll_0/clk_out1
  aresetn /rst_0/peripheral_aresetn
}

# Create axis_subset_converter
cell xilinx.com:ip:axis_subset_converter subset_0 {
  S_TDATA_NUM_BYTES.VALUE_SRC USER
  M_TDATA_NUM_BYTES.VALUE_SRC USER
  S_TDATA_NUM_BYTES 40
  M_TDATA_NUM_BYTES 32
  TDATA_REMAP {16'b0000000000000000,tdata[263:256],tdata[271:264],tdata[279:272],tdata[295:288],tdata[303:296],tdata[311:304],tdata[199:192],tdata[207:200],tdata[215:208],tdata[231:224],tdata[239:232],tdata[247:240],tdata[135:128],tdata[143:136],tdata[151:144],tdata[167:160],tdata[175:168],tdata[183:176],tdata[71:64],tdata[79:72],tdata[87:80],tdata[103:96],tdata[111:104],tdata[119:112],tdata[7:0],tdata[15:8],tdata[23:16],tdata[39:32],tdata[47:40],tdata[55:48]}
} {
  S_AXIS conv_1/M_AXIS
  aclk /pll_0/clk_out1
  aresetn /rst_0/peripheral_aresetn
}

# Create axis_fifo
cell pavel-demin:user:axis_fifo fifo_0 {
  S_AXIS_TDATA_WIDTH 256
  M_AXIS_TDATA_WIDTH 32
  WRITE_DEPTH 1024
  ALWAYS_READY TRUE
} {
  S_AXIS subset_0/M_AXIS
  aclk /pll_0/clk_out1
  aresetn slice_0/dout
}
