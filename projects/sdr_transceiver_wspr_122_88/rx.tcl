# Create port_slicer
cell pavel-demin:user:port_slicer slice_0 {
  DIN_WIDTH 8 DIN_FROM 0 DIN_TO 0
}

for {set i 0} {$i <= 15} {incr i} {

  # Create port_slicer
  cell pavel-demin:user:port_slicer slice_[expr $i + 1] {
    DIN_WIDTH 544 DIN_FROM [expr $i] DIN_TO [expr $i]
  }

  # Create port_selector
  cell pavel-demin:user:port_selector selector_$i {
    DOUT_WIDTH 16
  } {
    cfg slice_[expr $i + 1]/dout
    din /adc_0/m_axis_tdata
  }

  # Create port_slicer
  cell pavel-demin:user:port_slicer slice_[expr $i + 17] {
    DIN_WIDTH 544 DIN_FROM [expr 32 * $i + 63] DIN_TO [expr 32 * $i + 32]
  }

  # Create axis_constant
  cell pavel-demin:user:axis_constant phase_$i {
    AXIS_TDATA_WIDTH 32
  } {
    cfg_data slice_[expr $i + 17]/dout
    aclk /pll_0/clk_out1
  }

  # Create dds_compiler
  cell xilinx.com:ip:dds_compiler dds_$i {
    DDS_CLOCK_RATE 122.88
    SPURIOUS_FREE_DYNAMIC_RANGE 138
    FREQUENCY_RESOLUTION 0.2
    PHASE_INCREMENT Streaming
    HAS_PHASE_OUT false
    PHASE_WIDTH 30
    OUTPUT_WIDTH 24
    DSP48_USE Minimal
    NEGATIVE_SINE true
  } {
    S_AXIS_PHASE phase_$i/M_AXIS
    aclk /pll_0/clk_out1
  }

}

# Create xlconstant
cell xilinx.com:ip:xlconstant const_0

for {set i 0} {$i <= 31} {incr i} {

  # Create port_slicer
  cell pavel-demin:user:port_slicer dds_slice_$i {
    DIN_WIDTH 48 DIN_FROM [expr 24 * ($i % 2) + 23] DIN_TO [expr 24 * ($i % 2)]
  } {
    din dds_[expr $i / 2]/m_axis_data_tdata
  }

  # Create dsp48
  cell pavel-demin:user:dsp48 mult_$i {
    A_WIDTH 24
    B_WIDTH 16
    P_WIDTH 24
  } {
    A dds_slice_$i/dout
    B selector_[expr $i / 2]/dout
    CLK /pll_0/clk_out1
  }

  # Create cic_compiler
  cell xilinx.com:ip:cic_compiler cic_$i {
    INPUT_DATA_WIDTH.VALUE_SRC USER
    FILTER_TYPE Decimation
    NUMBER_OF_STAGES 6
    SAMPLE_RATE_CHANGES Fixed
    FIXED_OR_INITIAL_RATE 256
    INPUT_SAMPLE_FREQUENCY 122.88
    CLOCK_FREQUENCY 122.88
    INPUT_DATA_WIDTH 24
    QUANTIZATION Truncation
    OUTPUT_DATA_WIDTH 32
    USE_XTREME_DSP_SLICE false
    HAS_DOUT_TREADY true
    HAS_ARESETN true
  } {
    s_axis_data_tdata mult_$i/P
    s_axis_data_tvalid const_0/dout
    aclk /pll_0/clk_out1
    aresetn /rst_0/peripheral_aresetn
  }

}

# Create axis_combiner
cell  xilinx.com:ip:axis_combiner comb_0 {
  TDATA_NUM_BYTES.VALUE_SRC USER
  TDATA_NUM_BYTES 4
  NUM_SI 16
} {
  S00_AXIS cic_1/M_AXIS_DATA
  S01_AXIS cic_0/M_AXIS_DATA
  S02_AXIS cic_3/M_AXIS_DATA
  S03_AXIS cic_2/M_AXIS_DATA
  S04_AXIS cic_5/M_AXIS_DATA
  S05_AXIS cic_4/M_AXIS_DATA
  S06_AXIS cic_7/M_AXIS_DATA
  S07_AXIS cic_6/M_AXIS_DATA
  S08_AXIS cic_9/M_AXIS_DATA
  S09_AXIS cic_8/M_AXIS_DATA
  S10_AXIS cic_11/M_AXIS_DATA
  S11_AXIS cic_10/M_AXIS_DATA
  S12_AXIS cic_13/M_AXIS_DATA
  S13_AXIS cic_12/M_AXIS_DATA
  S14_AXIS cic_15/M_AXIS_DATA
  S15_AXIS cic_14/M_AXIS_DATA
  aclk /pll_0/clk_out1
  aresetn /rst_0/peripheral_aresetn
}

# Create axis_combiner
cell  xilinx.com:ip:axis_combiner comb_1 {
  TDATA_NUM_BYTES.VALUE_SRC USER
  TDATA_NUM_BYTES 4
  NUM_SI 16
} {
  S00_AXIS cic_17/M_AXIS_DATA
  S01_AXIS cic_16/M_AXIS_DATA
  S02_AXIS cic_19/M_AXIS_DATA
  S03_AXIS cic_18/M_AXIS_DATA
  S04_AXIS cic_21/M_AXIS_DATA
  S05_AXIS cic_20/M_AXIS_DATA
  S06_AXIS cic_23/M_AXIS_DATA
  S07_AXIS cic_22/M_AXIS_DATA
  S08_AXIS cic_25/M_AXIS_DATA
  S09_AXIS cic_24/M_AXIS_DATA
  S10_AXIS cic_27/M_AXIS_DATA
  S11_AXIS cic_26/M_AXIS_DATA
  S12_AXIS cic_29/M_AXIS_DATA
  S13_AXIS cic_28/M_AXIS_DATA
  S14_AXIS cic_31/M_AXIS_DATA
  S15_AXIS cic_30/M_AXIS_DATA
  aclk /pll_0/clk_out1
  aresetn /rst_0/peripheral_aresetn
}

# Create axis_combiner
cell  xilinx.com:ip:axis_combiner comb_2 {
  TDATA_NUM_BYTES.VALUE_SRC USER
  TDATA_NUM_BYTES 64
  NUM_SI 2
} {
  S00_AXIS comb_0/M_AXIS
  S01_AXIS comb_1/M_AXIS
  aclk /pll_0/clk_out1
  aresetn /rst_0/peripheral_aresetn
}

# Create axis_dwidth_converter
cell xilinx.com:ip:axis_dwidth_converter conv_0 {
  S_TDATA_NUM_BYTES.VALUE_SRC USER
  S_TDATA_NUM_BYTES 128
  M_TDATA_NUM_BYTES 4
} {
  S_AXIS comb_2/M_AXIS
  aclk /pll_0/clk_out1
  aresetn /rst_0/peripheral_aresetn
}

# Create cic_compiler
cell xilinx.com:ip:cic_compiler cic_32 {
  INPUT_DATA_WIDTH.VALUE_SRC USER
  FILTER_TYPE Decimation
  NUMBER_OF_STAGES 6
  SAMPLE_RATE_CHANGES Fixed
  FIXED_OR_INITIAL_RATE 640
  INPUT_SAMPLE_FREQUENCY 0.48
  CLOCK_FREQUENCY 122.88
  NUMBER_OF_CHANNELS 32
  INPUT_DATA_WIDTH 32
  QUANTIZATION Truncation
  OUTPUT_DATA_WIDTH 32
  USE_XTREME_DSP_SLICE false
  HAS_DOUT_TREADY true
  HAS_ARESETN true
} {
  S_AXIS_DATA conv_0/M_AXIS
  aclk /pll_0/clk_out1
  aresetn /rst_0/peripheral_aresetn
}

# Create fir_compiler
cell xilinx.com:ip:fir_compiler fir_0 {
  DATA_WIDTH.VALUE_SRC USER
  DATA_WIDTH 32
  COEFFICIENTVECTOR {-2.6229291156e-08, -1.4575165613e-08, 2.3544333020e-08, 9.9100277705e-09, -1.1896683332e-08, 3.6925912202e-09, -1.1339004787e-08, -3.0451475920e-08, 4.8797571294e-08, 7.5494421244e-08, -1.0301836240e-07, -1.4491234116e-07, 1.7627100468e-07, 2.4574893586e-07, -2.7037693949e-07, -3.8595773857e-07, 3.8650362421e-07, 5.7429309878e-07, -5.2496638982e-07, -8.2015794624e-07, 6.8501887880e-07, 1.1333795654e-06, -8.6466159546e-07, -1.5239287340e-06, 1.0604559271e-06, 2.0015493713e-06, -1.2673896014e-06, -2.5753300907e-06, 1.4787665603e-06, 3.2531230115e-06, -1.6863822651e-06, -4.0413338507e-06, 1.8801044234e-06, 4.9437982642e-06, -2.0484678157e-06, -5.9614471845e-06, 2.1787484964e-06, 7.0915539496e-06, -2.2573609777e-06, -8.3270769977e-06, 2.2703073325e-06, 9.6559308580e-06, -2.2038590945e-06, -1.1060389914e-05, 2.0453046806e-06, 1.2516509423e-05, -1.7838765291e-06, -1.3993700554e-05, 1.4117281179e-06, 1.5454340433e-05, -9.2510986791e-07, -1.6853601475e-05, 3.2552822663e-07, 1.8139055347e-05, 3.7790959753e-07, -1.9252690744e-05, -1.1695304164e-06, 2.0128780709e-05, 2.0233834879e-06, -2.0696322301e-05, -2.9028284846e-06, 2.0879729090e-05, 3.7591760052e-06, -2.0600280249e-05, -4.5307251123e-06, 1.9777613213e-05, 5.1416931505e-06, -1.8331820495e-05, -5.5016470229e-06, 1.6185669860e-05, 5.5051275243e-06, -1.3267257148e-05, -5.0319095025e-06, 9.5125992705e-06, 3.9474840388e-06, -4.8685543543e-06, -2.1044207332e-06, -7.0560144324e-07, -6.5966336498e-07, 7.2286820419e-06, 4.5111663983e-06, -1.4704078651e-05, -9.6261352659e-06, 2.3110719822e-05, 1.6183307059e-05, -3.2401724447e-05, -2.4360188983e-05, 4.2501927800e-05, 3.4327835638e-05, -5.3306442927e-05, -4.6245671965e-05, 6.4679104461e-05, 6.0255140573e-05, -7.6452013395e-05, -7.6473111190e-05, 8.8425522952e-05, 9.4984256421e-05, -1.0036982505e-04, -1.1583354218e-04, 1.1202734925e-04, 1.3901756018e-04, -1.2312053475e-04, -1.6448751209e-04, 1.3333731367e-04, 1.9211521779e-04, -1.4236577661e-04, -2.2171121337e-04, 1.4988290178e-04, 2.5300722784e-04, -1.5556717674e-04, -2.8565041306e-04, 1.5910844055e-04, 3.1919711488e-04, -1.6021993412e-04, -3.5310890573e-04, 1.5865025520e-04, 3.8674876068e-04, -1.5419720381e-04, -4.1937923953e-04, 1.4672191721e-04, 4.5016117987e-04, -1.3616511429e-04, -4.7815487496e-04, 1.2256395997e-04, 5.0232116969e-04, -1.0608053824e-04, -5.2155624589e-04, 8.6966897475e-05, 5.3462791394e-04, -6.5660540085e-05, -5.4025551366e-04, 4.2750608156e-05, 5.3709340238e-04, -1.9005357291e-05, -5.2374689354e-04, -4.6116682796e-06, 4.9878794428e-04, 2.6925404920e-05, -4.6077454940e-04, -4.6536260056e-05, 4.0827017550e-04, 6.1807151452e-05, -3.3986572830e-04, -7.0853110989e-05, 2.5420101804e-04, 7.1530330898e-05, -1.4998778443e-04, -6.1425467547e-05, 2.6029308091e-05, 3.7817498847e-05, 1.1867574163e-04, 2.1896895751e-06, -2.8509799047e-04, -6.1882653497e-05, 4.7396363736e-04, 1.4480728975e-04, -6.8580623778e-04, -2.5480411283e-04, 9.2093849724e-04, 3.9601752226e-04, -1.1794297436e-03, -5.7290752140e-04, 1.4610835331e-03, 7.9026276845e-04, -1.7654198679e-03, -1.0532216722e-03, 2.0916583771e-03, 1.3673007439e-03, -2.4387067862e-03, -1.7384381397e-03, 2.8051535129e-03, 2.1730607890e-03, -3.1892716855e-03, -2.6782574687e-03, 3.5887769529e-03, 3.2614791540e-03, -4.0013841493e-03, -3.9313188185e-03, 4.4242332946e-03, 4.6973129877e-03, -4.8541037244e-03, -5.5703155531e-03, 5.2873788114e-03, 6.5628956049e-03, -5.7200071278e-03, -7.6898749008e-03, 6.1474437964e-03, 8.9690681200e-03, -6.5645619026e-03, -1.0422323145e-02, 6.9655085089e-03, 1.2076997986e-02, -7.3434785784e-03, -1.3968103872e-02, 7.6903618246e-03, 1.6141517927e-02, -7.9961747315e-03, -1.8659220130e-02, 8.2468963952e-03, 2.1604883161e-02, -8.4252555522e-03, -2.5099025459e-02, 8.5046440751e-03, 2.9317701584e-02, -8.4436310247e-03, -3.4529585440e-02, 8.1724574948e-03, 4.1165324366e-02, -7.5631926110e-03, -4.9958963078e-02, 6.3563644788e-03, 6.2265941397e-02, -3.9539730022e-03, -8.0875586577e-02, -1.2858875252e-03, 1.1248346786e-01, 1.5223759606e-02, -1.7733598930e-01, -7.0460504790e-02, 3.6096847091e-01, 6.1539424699e-01, 3.6096847091e-01, -7.0460504790e-02, -1.7733598930e-01, 1.5223759606e-02, 1.1248346786e-01, -1.2858875252e-03, -8.0875586577e-02, -3.9539730022e-03, 6.2265941397e-02, 6.3563644788e-03, -4.9958963078e-02, -7.5631926110e-03, 4.1165324366e-02, 8.1724574948e-03, -3.4529585440e-02, -8.4436310247e-03, 2.9317701584e-02, 8.5046440751e-03, -2.5099025459e-02, -8.4252555522e-03, 2.1604883161e-02, 8.2468963952e-03, -1.8659220130e-02, -7.9961747315e-03, 1.6141517927e-02, 7.6903618246e-03, -1.3968103872e-02, -7.3434785784e-03, 1.2076997986e-02, 6.9655085089e-03, -1.0422323145e-02, -6.5645619026e-03, 8.9690681200e-03, 6.1474437964e-03, -7.6898749008e-03, -5.7200071278e-03, 6.5628956049e-03, 5.2873788114e-03, -5.5703155531e-03, -4.8541037244e-03, 4.6973129877e-03, 4.4242332946e-03, -3.9313188185e-03, -4.0013841493e-03, 3.2614791540e-03, 3.5887769529e-03, -2.6782574687e-03, -3.1892716855e-03, 2.1730607890e-03, 2.8051535129e-03, -1.7384381397e-03, -2.4387067862e-03, 1.3673007439e-03, 2.0916583771e-03, -1.0532216722e-03, -1.7654198679e-03, 7.9026276845e-04, 1.4610835331e-03, -5.7290752140e-04, -1.1794297436e-03, 3.9601752226e-04, 9.2093849724e-04, -2.5480411283e-04, -6.8580623778e-04, 1.4480728975e-04, 4.7396363736e-04, -6.1882653497e-05, -2.8509799047e-04, 2.1896895751e-06, 1.1867574163e-04, 3.7817498847e-05, 2.6029308091e-05, -6.1425467547e-05, -1.4998778443e-04, 7.1530330898e-05, 2.5420101804e-04, -7.0853110989e-05, -3.3986572830e-04, 6.1807151452e-05, 4.0827017550e-04, -4.6536260056e-05, -4.6077454940e-04, 2.6925404920e-05, 4.9878794428e-04, -4.6116682796e-06, -5.2374689354e-04, -1.9005357291e-05, 5.3709340238e-04, 4.2750608156e-05, -5.4025551366e-04, -6.5660540085e-05, 5.3462791394e-04, 8.6966897475e-05, -5.2155624589e-04, -1.0608053824e-04, 5.0232116969e-04, 1.2256395997e-04, -4.7815487496e-04, -1.3616511429e-04, 4.5016117987e-04, 1.4672191721e-04, -4.1937923953e-04, -1.5419720381e-04, 3.8674876068e-04, 1.5865025520e-04, -3.5310890573e-04, -1.6021993412e-04, 3.1919711488e-04, 1.5910844055e-04, -2.8565041306e-04, -1.5556717674e-04, 2.5300722784e-04, 1.4988290178e-04, -2.2171121337e-04, -1.4236577661e-04, 1.9211521779e-04, 1.3333731367e-04, -1.6448751209e-04, -1.2312053475e-04, 1.3901756018e-04, 1.1202734925e-04, -1.1583354218e-04, -1.0036982505e-04, 9.4984256421e-05, 8.8425522952e-05, -7.6473111190e-05, -7.6452013395e-05, 6.0255140573e-05, 6.4679104461e-05, -4.6245671965e-05, -5.3306442927e-05, 3.4327835638e-05, 4.2501927800e-05, -2.4360188983e-05, -3.2401724447e-05, 1.6183307059e-05, 2.3110719822e-05, -9.6261352659e-06, -1.4704078651e-05, 4.5111663983e-06, 7.2286820419e-06, -6.5966336498e-07, -7.0560144324e-07, -2.1044207332e-06, -4.8685543544e-06, 3.9474840388e-06, 9.5125992705e-06, -5.0319095025e-06, -1.3267257148e-05, 5.5051275243e-06, 1.6185669860e-05, -5.5016470229e-06, -1.8331820495e-05, 5.1416931505e-06, 1.9777613213e-05, -4.5307251123e-06, -2.0600280249e-05, 3.7591760052e-06, 2.0879729090e-05, -2.9028284846e-06, -2.0696322301e-05, 2.0233834879e-06, 2.0128780709e-05, -1.1695304164e-06, -1.9252690744e-05, 3.7790959753e-07, 1.8139055347e-05, 3.2552822663e-07, -1.6853601475e-05, -9.2510986791e-07, 1.5454340433e-05, 1.4117281179e-06, -1.3993700554e-05, -1.7838765291e-06, 1.2516509423e-05, 2.0453046806e-06, -1.1060389914e-05, -2.2038590945e-06, 9.6559308580e-06, 2.2703073325e-06, -8.3270769977e-06, -2.2573609777e-06, 7.0915539496e-06, 2.1787484964e-06, -5.9614471845e-06, -2.0484678157e-06, 4.9437982642e-06, 1.8801044234e-06, -4.0413338507e-06, -1.6863822651e-06, 3.2531230115e-06, 1.4787665603e-06, -2.5753300907e-06, -1.2673896014e-06, 2.0015493713e-06, 1.0604559271e-06, -1.5239287340e-06, -8.6466159546e-07, 1.1333795654e-06, 6.8501887880e-07, -8.2015794624e-07, -5.2496638982e-07, 5.7429309878e-07, 3.8650362421e-07, -3.8595773857e-07, -2.7037693949e-07, 2.4574893586e-07, 1.7627100468e-07, -1.4491234116e-07, -1.0301836240e-07, 7.5494421244e-08, 4.8797571294e-08, -3.0451475920e-08, -1.1339004787e-08, 3.6925912202e-09, -1.1896683332e-08, 9.9100277705e-09, 2.3544333020e-08, -1.4575165613e-08, -2.6229291156e-08}
  COEFFICIENT_WIDTH 32
  QUANTIZATION Quantize_Only
  BESTPRECISION true
  FILTER_TYPE Decimation
  DECIMATION_RATE 2
  NUMBER_CHANNELS 32
  NUMBER_PATHS 1
  SAMPLE_FREQUENCY 0.00075
  CLOCK_FREQUENCY 122.88
  OUTPUT_ROUNDING_MODE Convergent_Rounding_to_Even
  OUTPUT_WIDTH 33
  M_DATA_HAS_TREADY true
  HAS_ARESETN true
} {
  S_AXIS_DATA cic_32/M_AXIS_DATA
  aclk /pll_0/clk_out1
  aresetn /rst_0/peripheral_aresetn
}

# Create axis_subset_converter
cell xilinx.com:ip:axis_subset_converter subset_0 {
  S_TDATA_NUM_BYTES.VALUE_SRC USER
  M_TDATA_NUM_BYTES.VALUE_SRC USER
  S_TDATA_NUM_BYTES 5
  M_TDATA_NUM_BYTES 4
  TDATA_REMAP {tdata[31:0]}
} {
  S_AXIS fir_0/M_AXIS_DATA
  aclk /pll_0/clk_out1
  aresetn /rst_0/peripheral_aresetn
}

# Create floating_point
cell xilinx.com:ip:floating_point fp_0 {
  OPERATION_TYPE Fixed_to_float
  A_PRECISION_TYPE.VALUE_SRC USER
  C_A_EXPONENT_WIDTH.VALUE_SRC USER
  C_A_FRACTION_WIDTH.VALUE_SRC USER
  A_PRECISION_TYPE Custom
  C_A_EXPONENT_WIDTH 2
  C_A_FRACTION_WIDTH 30
  RESULT_PRECISION_TYPE Single
  HAS_ARESETN true
} {
  S_AXIS_A subset_0/M_AXIS
  aclk /pll_0/clk_out1
  aresetn /rst_0/peripheral_aresetn
}

# Create axis_dwidth_converter
cell xilinx.com:ip:axis_dwidth_converter conv_1 {
  S_TDATA_NUM_BYTES.VALUE_SRC USER
  S_TDATA_NUM_BYTES 4
  M_TDATA_NUM_BYTES 128
} {
  S_AXIS fp_0/M_AXIS_RESULT
  aclk /pll_0/clk_out1
  aresetn /rst_0/peripheral_aresetn
}

# Create axis_fifo
cell pavel-demin:user:axis_fifo fifo_0 {
  S_AXIS_TDATA_WIDTH 1024
  M_AXIS_TDATA_WIDTH 1024
  WRITE_DEPTH 1024
  ALWAYS_READY TRUE
} {
  S_AXIS conv_1/M_AXIS
  aclk /pll_0/clk_out1
  aresetn slice_0/dout
}

# Create axis_dwidth_converter
cell xilinx.com:ip:axis_dwidth_converter conv_2 {
  S_TDATA_NUM_BYTES.VALUE_SRC USER
  S_TDATA_NUM_BYTES 128
  M_TDATA_NUM_BYTES 4
} {
  S_AXIS fifo_0/M_AXIS
  aclk /pll_0/clk_out1
  aresetn slice_0/dout
}
