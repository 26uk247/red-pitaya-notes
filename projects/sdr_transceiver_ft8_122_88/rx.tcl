# Create port_slicer
cell pavel-demin:user:port_slicer slice_0 {
  DIN_WIDTH 8 DIN_FROM 0 DIN_TO 0
}

for {set i 0} {$i <= 15} {incr i} {

  # Create port_slicer
  cell pavel-demin:user:port_slicer slice_[expr $i + 1] {
    DIN_WIDTH 544 DIN_FROM [expr $i] DIN_TO [expr $i]
  }

  # Create port_selector
  cell pavel-demin:user:port_selector selector_$i {
    DOUT_WIDTH 16
  } {
    cfg slice_[expr $i + 1]/dout
    din /adc_0/m_axis_tdata
  }

  # Create port_slicer
  cell pavel-demin:user:port_slicer slice_[expr $i + 17] {
    DIN_WIDTH 544 DIN_FROM [expr 32 * $i + 63] DIN_TO [expr 32 * $i + 32]
  }

  # Create axis_constant
  cell pavel-demin:user:axis_constant phase_$i {
    AXIS_TDATA_WIDTH 32
  } {
    cfg_data slice_[expr $i + 17]/dout
    aclk /pll_0/clk_out1
  }

  # Create dds_compiler
  cell xilinx.com:ip:dds_compiler dds_$i {
    DDS_CLOCK_RATE 122.88
    SPURIOUS_FREE_DYNAMIC_RANGE 138
    FREQUENCY_RESOLUTION 0.2
    PHASE_INCREMENT Streaming
    HAS_PHASE_OUT false
    PHASE_WIDTH 30
    OUTPUT_WIDTH 24
    DSP48_USE Minimal
    NEGATIVE_SINE true
  } {
    S_AXIS_PHASE phase_$i/M_AXIS
    aclk /pll_0/clk_out1
  }

}

# Create xlconstant
cell xilinx.com:ip:xlconstant const_0

for {set i 0} {$i <= 31} {incr i} {

  # Create port_slicer
  cell pavel-demin:user:port_slicer dds_slice_$i {
    DIN_WIDTH 48 DIN_FROM [expr 24 * ($i % 2) + 23] DIN_TO [expr 24 * ($i % 2)]
  } {
    din dds_[expr $i / 2]/m_axis_data_tdata
  }

  # Create dsp48
  cell pavel-demin:user:dsp48 mult_$i {
    A_WIDTH 24
    B_WIDTH 16
    P_WIDTH 24
  } {
    A dds_slice_$i/dout
    B selector_[expr $i / 2]/dout
    CLK /pll_0/clk_out1
  }

  # Create cic_compiler
  cell xilinx.com:ip:cic_compiler cic_$i {
    INPUT_DATA_WIDTH.VALUE_SRC USER
    FILTER_TYPE Decimation
    NUMBER_OF_STAGES 6
    SAMPLE_RATE_CHANGES Fixed
    FIXED_OR_INITIAL_RATE 128
    INPUT_SAMPLE_FREQUENCY 122.88
    CLOCK_FREQUENCY 122.88
    INPUT_DATA_WIDTH 24
    QUANTIZATION Truncation
    OUTPUT_DATA_WIDTH 32
    USE_XTREME_DSP_SLICE false
    HAS_DOUT_TREADY true
    HAS_ARESETN true
  } {
    s_axis_data_tdata mult_$i/P
    s_axis_data_tvalid const_0/dout
    aclk /pll_0/clk_out1
    aresetn /rst_0/peripheral_aresetn
  }

}

# Create axis_combiner
cell  xilinx.com:ip:axis_combiner comb_0 {
  TDATA_NUM_BYTES.VALUE_SRC USER
  TDATA_NUM_BYTES 4
  NUM_SI 16
} {
  S00_AXIS cic_0/M_AXIS_DATA
  S01_AXIS cic_1/M_AXIS_DATA
  S02_AXIS cic_2/M_AXIS_DATA
  S03_AXIS cic_3/M_AXIS_DATA
  S04_AXIS cic_4/M_AXIS_DATA
  S05_AXIS cic_5/M_AXIS_DATA
  S06_AXIS cic_6/M_AXIS_DATA
  S07_AXIS cic_7/M_AXIS_DATA
  S08_AXIS cic_8/M_AXIS_DATA
  S09_AXIS cic_9/M_AXIS_DATA
  S10_AXIS cic_10/M_AXIS_DATA
  S11_AXIS cic_11/M_AXIS_DATA
  S12_AXIS cic_12/M_AXIS_DATA
  S13_AXIS cic_13/M_AXIS_DATA
  S14_AXIS cic_14/M_AXIS_DATA
  S15_AXIS cic_15/M_AXIS_DATA
  aclk /pll_0/clk_out1
  aresetn /rst_0/peripheral_aresetn
}

# Create axis_combiner
cell  xilinx.com:ip:axis_combiner comb_1 {
  TDATA_NUM_BYTES.VALUE_SRC USER
  TDATA_NUM_BYTES 4
  NUM_SI 16
} {
  S00_AXIS cic_16/M_AXIS_DATA
  S01_AXIS cic_17/M_AXIS_DATA
  S02_AXIS cic_18/M_AXIS_DATA
  S03_AXIS cic_19/M_AXIS_DATA
  S04_AXIS cic_20/M_AXIS_DATA
  S05_AXIS cic_21/M_AXIS_DATA
  S06_AXIS cic_22/M_AXIS_DATA
  S07_AXIS cic_23/M_AXIS_DATA
  S08_AXIS cic_24/M_AXIS_DATA
  S09_AXIS cic_25/M_AXIS_DATA
  S10_AXIS cic_26/M_AXIS_DATA
  S11_AXIS cic_27/M_AXIS_DATA
  S12_AXIS cic_28/M_AXIS_DATA
  S13_AXIS cic_29/M_AXIS_DATA
  S14_AXIS cic_30/M_AXIS_DATA
  S15_AXIS cic_31/M_AXIS_DATA
  aclk /pll_0/clk_out1
  aresetn /rst_0/peripheral_aresetn
}

# Create axis_combiner
cell  xilinx.com:ip:axis_combiner comb_2 {
  TDATA_NUM_BYTES.VALUE_SRC USER
  TDATA_NUM_BYTES 64
  NUM_SI 2
} {
  S00_AXIS comb_0/M_AXIS
  S01_AXIS comb_1/M_AXIS
  aclk /pll_0/clk_out1
  aresetn /rst_0/peripheral_aresetn
}

# Create axis_dwidth_converter
cell xilinx.com:ip:axis_dwidth_converter conv_0 {
  S_TDATA_NUM_BYTES.VALUE_SRC USER
  S_TDATA_NUM_BYTES 128
  M_TDATA_NUM_BYTES 4
} {
  S_AXIS comb_2/M_AXIS
  aclk /pll_0/clk_out1
  aresetn /rst_0/peripheral_aresetn
}

# Create cic_compiler
cell xilinx.com:ip:cic_compiler cic_32 {
  INPUT_DATA_WIDTH.VALUE_SRC USER
  FILTER_TYPE Decimation
  NUMBER_OF_STAGES 6
  SAMPLE_RATE_CHANGES Fixed
  FIXED_OR_INITIAL_RATE 120
  INPUT_SAMPLE_FREQUENCY 0.96
  CLOCK_FREQUENCY 122.88
  NUMBER_OF_CHANNELS 32
  INPUT_DATA_WIDTH 32
  QUANTIZATION Truncation
  OUTPUT_DATA_WIDTH 32
  USE_XTREME_DSP_SLICE false
  HAS_DOUT_TREADY true
  HAS_ARESETN true
} {
  S_AXIS_DATA conv_0/M_AXIS
  aclk /pll_0/clk_out1
  aresetn /rst_0/peripheral_aresetn
}

# Create fir_compiler
cell xilinx.com:ip:fir_compiler fir_0 {
  DATA_WIDTH.VALUE_SRC USER
  DATA_WIDTH 32
  COEFFICIENTVECTOR {-2.6228395147e-08, -1.4574287585e-08, 2.3543638973e-08, 9.9092128166e-09, -1.1896580332e-08, 3.6930041051e-09, -1.1338017951e-08, -3.0450975780e-08, 4.8794887287e-08, 7.5492287896e-08, -1.0301327014e-07, -1.4490760518e-07, 1.7626270168e-07, 2.4574033884e-07, -2.7036455194e-07, -3.8594369502e-07, 3.8648623619e-07, 5.7427166289e-07, -5.2494308081e-07, -8.2012678488e-07, 6.8498877024e-07, 1.1333359405e-06, -8.6462390542e-07, -1.5238694964e-06, 1.0604100335e-06, 2.0014709706e-06, -1.2673351111e-06, -2.5752286039e-06, 1.4787033818e-06, 3.2529941964e-06, -1.6863106694e-06, -4.0411731974e-06, 1.8800251378e-06, 4.9436011108e-06, -2.0483820794e-06, -5.9612088386e-06, 2.1786581148e-06, 7.0912698401e-06, -2.2572683617e-06, -8.3267428544e-06, 2.2702155197e-06, 9.6555429231e-06, -2.2037717411e-06, -1.1059945178e-05, 2.0452260209e-06, 1.2516005884e-05, -1.7838112960e-06, -1.3993137493e-05, 1.4116814245e-06, 1.5453718710e-05, -9.2508703938e-07, -1.6852923831e-05, 3.2553457635e-07, 1.8138326730e-05, 3.7786911310e-07, -1.9251918491e-05, -1.1694514210e-06, 2.0127974906e-05, 2.0232626377e-06, -2.0695495999e-05, -2.9026639254e-06, 2.0878898482e-05, 3.7589678794e-06, -2.0599464790e-05, -4.5304761027e-06, 1.9776835683e-05, 5.1414090754e-06, -1.8331106969e-05, -5.5013374550e-06, 1.6185049582e-05, 5.5048064264e-06, -1.3266762292e-05, -5.0315958459e-06, 9.5122645942e-06, 3.9472023993e-06, -4.8684167494e-06, -2.1042018576e-06, -7.0550346803e-07, -6.5978183118e-07, 7.2283094649e-06, 4.5111399258e-06, -1.4703392454e-05, -9.6259119527e-06, 2.3109682048e-05, 1.6182827485e-05, -3.2400299330e-05, -2.4359386263e-05, 4.2500082989e-05, 3.4326635693e-05, -5.3304150749e-05, -4.6243994007e-05, 6.4676343265e-05, 6.0252897852e-05, -7.6448768909e-05, -7.6470212018e-05, 8.8421789653e-05, 9.4980605537e-05, -1.0036560745e-04, -1.1582904244e-04, 1.1202266301e-04, 1.3901211450e-04, -1.2311540749e-04, -1.6448102512e-04, 1.3333178695e-04, 1.9210759974e-04, -1.4235990545e-04, -2.2170238242e-04, 1.4987675519e-04, 2.5299711328e-04, -1.5556083775e-04, -2.8563895890e-04, 1.5910200574e-04, 3.1918428365e-04, -1.6021351267e-04, -3.5309468247e-04, 1.5864396739e-04, 3.8673315702e-04, -1.5419117897e-04, -4.1936229791e-04, 1.4671629106e-04, 4.5014297777e-04, -1.3616002562e-04, -4.7813552921e-04, 1.2255954632e-04, 5.0230084039e-04, -1.0607693057e-04, -5.2153513832e-04, 8.6964217626e-05, 5.3460628546e-04, -6.5658891749e-05, -5.4023367495e-04, 4.2750070564e-05, 5.3707171990e-04, -1.9005977860e-05, -5.2372579149e-04, -4.6098821299e-06, 4.9876790595e-04, 2.6922494695e-05, -4.6075611751e-04, -4.6532325633e-05, 4.0825395186e-04, 6.1802361062e-05, -3.3985237235e-04, -7.0847711606e-05, 2.5419124465e-04, 7.1524659152e-05, -1.4998236075e-04, -6.1419961528e-05, 2.6029048881e-05, 3.7812711408e-05, 1.1866998460e-04, 2.1930870444e-06, -2.8508532605e-04, -6.1883851300e-05, 4.7394314770e-04, 1.4480532937e-04, -6.8577698762e-04, -2.5479787518e-04, 9.2089954381e-04, 3.9600571516e-04, -1.1793801477e-03, -5.7288866650e-04, 1.4610223714e-03, 7.9023518772e-04, -1.7653462464e-03, -1.0531834736e-03, 2.0915714450e-03, 1.3672498059e-03, -2.4386057511e-03, -1.7383720944e-03, 2.8050376562e-03, 2.1729770002e-03, -3.1891403796e-03, -2.6781530045e-03, 3.5886296951e-03, 3.2613507829e-03, -4.0012205538e-03, -3.9311629528e-03, 4.4240531286e-03, 4.6971256467e-03, -4.8539069332e-03, -5.5700923119e-03, 5.2871655452e-03, 6.5626315259e-03, -5.7197777744e-03, -7.6895644444e-03, 6.1471990215e-03, 8.9687050246e-03, -6.5643027015e-03, -1.0421900268e-02, 6.9652362752e-03, 1.2076507086e-02, -7.3431951981e-03, -1.3967535308e-02, 7.6900698096e-03, 1.6140860224e-02, -7.9958774269e-03, -1.8658459354e-02, 8.2465983668e-03, 2.1604002134e-02, -8.4249629715e-03, -2.5098002318e-02, 8.5043656549e-03, 2.9316507720e-02, -8.4433795588e-03, -3.4528182151e-02, 8.1722527463e-03, 4.1163657210e-02, -7.5630671720e-03, -4.9956951857e-02, 6.3563767895e-03, 6.2263461464e-02, -3.9542399714e-03, -8.0872432607e-02, -1.2850945487e-03, 1.1247928993e-01, 1.5221663377e-02, -1.7733033875e-01, -7.0454154532e-02, 3.6096522058e-01, 6.1538458672e-01, 3.6096522058e-01, -7.0454154532e-02, -1.7733033875e-01, 1.5221663377e-02, 1.1247928993e-01, -1.2850945487e-03, -8.0872432607e-02, -3.9542399714e-03, 6.2263461464e-02, 6.3563767895e-03, -4.9956951857e-02, -7.5630671720e-03, 4.1163657210e-02, 8.1722527463e-03, -3.4528182151e-02, -8.4433795588e-03, 2.9316507720e-02, 8.5043656549e-03, -2.5098002318e-02, -8.4249629715e-03, 2.1604002134e-02, 8.2465983668e-03, -1.8658459354e-02, -7.9958774269e-03, 1.6140860224e-02, 7.6900698096e-03, -1.3967535308e-02, -7.3431951981e-03, 1.2076507086e-02, 6.9652362752e-03, -1.0421900268e-02, -6.5643027015e-03, 8.9687050246e-03, 6.1471990215e-03, -7.6895644444e-03, -5.7197777744e-03, 6.5626315259e-03, 5.2871655452e-03, -5.5700923119e-03, -4.8539069332e-03, 4.6971256467e-03, 4.4240531286e-03, -3.9311629528e-03, -4.0012205538e-03, 3.2613507829e-03, 3.5886296951e-03, -2.6781530045e-03, -3.1891403796e-03, 2.1729770002e-03, 2.8050376562e-03, -1.7383720944e-03, -2.4386057511e-03, 1.3672498059e-03, 2.0915714450e-03, -1.0531834736e-03, -1.7653462464e-03, 7.9023518772e-04, 1.4610223714e-03, -5.7288866650e-04, -1.1793801477e-03, 3.9600571516e-04, 9.2089954381e-04, -2.5479787518e-04, -6.8577698762e-04, 1.4480532937e-04, 4.7394314770e-04, -6.1883851300e-05, -2.8508532605e-04, 2.1930870444e-06, 1.1866998460e-04, 3.7812711408e-05, 2.6029048881e-05, -6.1419961528e-05, -1.4998236075e-04, 7.1524659152e-05, 2.5419124465e-04, -7.0847711606e-05, -3.3985237235e-04, 6.1802361062e-05, 4.0825395186e-04, -4.6532325633e-05, -4.6075611751e-04, 2.6922494695e-05, 4.9876790595e-04, -4.6098821299e-06, -5.2372579149e-04, -1.9005977860e-05, 5.3707171990e-04, 4.2750070564e-05, -5.4023367495e-04, -6.5658891749e-05, 5.3460628546e-04, 8.6964217626e-05, -5.2153513832e-04, -1.0607693057e-04, 5.0230084039e-04, 1.2255954632e-04, -4.7813552921e-04, -1.3616002562e-04, 4.5014297777e-04, 1.4671629106e-04, -4.1936229791e-04, -1.5419117897e-04, 3.8673315702e-04, 1.5864396739e-04, -3.5309468247e-04, -1.6021351267e-04, 3.1918428365e-04, 1.5910200574e-04, -2.8563895890e-04, -1.5556083775e-04, 2.5299711328e-04, 1.4987675519e-04, -2.2170238242e-04, -1.4235990545e-04, 1.9210759974e-04, 1.3333178695e-04, -1.6448102512e-04, -1.2311540749e-04, 1.3901211450e-04, 1.1202266301e-04, -1.1582904244e-04, -1.0036560745e-04, 9.4980605537e-05, 8.8421789653e-05, -7.6470212018e-05, -7.6448768909e-05, 6.0252897852e-05, 6.4676343265e-05, -4.6243994007e-05, -5.3304150749e-05, 3.4326635693e-05, 4.2500082989e-05, -2.4359386263e-05, -3.2400299330e-05, 1.6182827485e-05, 2.3109682048e-05, -9.6259119527e-06, -1.4703392454e-05, 4.5111399258e-06, 7.2283094649e-06, -6.5978183118e-07, -7.0550346803e-07, -2.1042018576e-06, -4.8684167494e-06, 3.9472023993e-06, 9.5122645942e-06, -5.0315958459e-06, -1.3266762292e-05, 5.5048064264e-06, 1.6185049582e-05, -5.5013374550e-06, -1.8331106969e-05, 5.1414090754e-06, 1.9776835683e-05, -4.5304761027e-06, -2.0599464790e-05, 3.7589678794e-06, 2.0878898482e-05, -2.9026639254e-06, -2.0695495999e-05, 2.0232626377e-06, 2.0127974906e-05, -1.1694514210e-06, -1.9251918491e-05, 3.7786911310e-07, 1.8138326730e-05, 3.2553457635e-07, -1.6852923831e-05, -9.2508703938e-07, 1.5453718710e-05, 1.4116814245e-06, -1.3993137493e-05, -1.7838112960e-06, 1.2516005884e-05, 2.0452260209e-06, -1.1059945178e-05, -2.2037717411e-06, 9.6555429231e-06, 2.2702155197e-06, -8.3267428544e-06, -2.2572683617e-06, 7.0912698401e-06, 2.1786581148e-06, -5.9612088386e-06, -2.0483820794e-06, 4.9436011108e-06, 1.8800251378e-06, -4.0411731974e-06, -1.6863106694e-06, 3.2529941964e-06, 1.4787033818e-06, -2.5752286039e-06, -1.2673351111e-06, 2.0014709706e-06, 1.0604100335e-06, -1.5238694964e-06, -8.6462390542e-07, 1.1333359405e-06, 6.8498877024e-07, -8.2012678488e-07, -5.2494308081e-07, 5.7427166289e-07, 3.8648623619e-07, -3.8594369502e-07, -2.7036455194e-07, 2.4574033884e-07, 1.7626270168e-07, -1.4490760518e-07, -1.0301327014e-07, 7.5492287896e-08, 4.8794887287e-08, -3.0450975780e-08, -1.1338017951e-08, 3.6930041051e-09, -1.1896580332e-08, 9.9092128166e-09, 2.3543638973e-08, -1.4574287585e-08, -2.6228395147e-08}
  COEFFICIENT_WIDTH 32
  QUANTIZATION Quantize_Only
  BESTPRECISION true
  FILTER_TYPE Decimation
  DECIMATION_RATE 2
  NUMBER_CHANNELS 32
  NUMBER_PATHS 1
  SAMPLE_FREQUENCY 0.008
  CLOCK_FREQUENCY 122.88
  OUTPUT_ROUNDING_MODE Convergent_Rounding_to_Even
  OUTPUT_WIDTH 33
  M_DATA_HAS_TREADY true
  HAS_ARESETN true
} {
  S_AXIS_DATA cic_32/M_AXIS_DATA
  aclk /pll_0/clk_out1
  aresetn /rst_0/peripheral_aresetn
}

# Create axis_subset_converter
cell xilinx.com:ip:axis_subset_converter subset_0 {
  S_TDATA_NUM_BYTES.VALUE_SRC USER
  M_TDATA_NUM_BYTES.VALUE_SRC USER
  S_TDATA_NUM_BYTES 5
  M_TDATA_NUM_BYTES 4
  TDATA_REMAP {tdata[31:0]}
} {
  S_AXIS fir_0/M_AXIS_DATA
  aclk /pll_0/clk_out1
  aresetn /rst_0/peripheral_aresetn
}

# Create floating_point
cell xilinx.com:ip:floating_point fp_0 {
  OPERATION_TYPE Fixed_to_float
  A_PRECISION_TYPE.VALUE_SRC USER
  C_A_EXPONENT_WIDTH.VALUE_SRC USER
  C_A_FRACTION_WIDTH.VALUE_SRC USER
  A_PRECISION_TYPE Custom
  C_A_EXPONENT_WIDTH 2
  C_A_FRACTION_WIDTH 30
  RESULT_PRECISION_TYPE Single
  HAS_ARESETN true
} {
  S_AXIS_A subset_0/M_AXIS
  aclk /pll_0/clk_out1
  aresetn /rst_0/peripheral_aresetn
}

# Create axis_dwidth_converter
cell xilinx.com:ip:axis_dwidth_converter conv_1 {
  S_TDATA_NUM_BYTES.VALUE_SRC USER
  S_TDATA_NUM_BYTES 4
  M_TDATA_NUM_BYTES 128
} {
  S_AXIS fp_0/M_AXIS_RESULT
  aclk /pll_0/clk_out1
  aresetn /rst_0/peripheral_aresetn
}

# Create axis_fifo
cell pavel-demin:user:axis_fifo fifo_0 {
  S_AXIS_TDATA_WIDTH 1024
  M_AXIS_TDATA_WIDTH 1024
  WRITE_DEPTH 1024
  ALWAYS_READY TRUE
} {
  S_AXIS conv_1/M_AXIS
  aclk /pll_0/clk_out1
  aresetn slice_0/dout
}

# Create axis_dwidth_converter
cell xilinx.com:ip:axis_dwidth_converter conv_2 {
  S_TDATA_NUM_BYTES.VALUE_SRC USER
  S_TDATA_NUM_BYTES 128
  M_TDATA_NUM_BYTES 4
} {
  S_AXIS fifo_0/M_AXIS
  aclk /pll_0/clk_out1
  aresetn slice_0/dout
}
